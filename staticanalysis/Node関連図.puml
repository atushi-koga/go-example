@startuml
skinparam direction top to bottom

' Nodeインタフェースをパッケージ化
package "Node" as NodePkg {
  interface Node
}

' グループ: 宣言を表すノード
package "Decl: 宣言を表すノード" {
  interface Decl
  NodePkg::Node <|-- Decl

  class BadDecl
  class GenDecl
  class FuncDecl
  Decl <|-- BadDecl
  Decl <|-- GenDecl
  Decl <|-- FuncDecl
}

' グループ: 宣言の詳細を表すノード
package "Spec: 宣言の詳細を表すノード" {
  interface Spec
  NodePkg::Node <|-- Spec

  class ImportSpec
  class ValueSpec
  class TypeSpec
  Spec <|-- ImportSpec
  Spec <|-- ValueSpec
  Spec <|-- TypeSpec
}

' グループ: 文を表すノード
package "Stmt: 文を表すノード" {
  interface Stmt
  NodePkg::Node <|-- Stmt

  class BadStmt
  class DeclStmt
  class EmptyStmt
  class LabeledStmt
  class ExprStmt
  class SendStmt
  class IncDecStmt
  class AssignStmt
  class GoStmt
  class DeferStmt
  class ReturnStmt
  class BranchStmt
  class BlockStmt
  class IfStmt
  class SwitchStmt
  class TypeSwitchStmt
  class SelectStmt
  class ForStmt
  class RangeStmt
  Stmt <|-- BadStmt
  Stmt <|-- DeclStmt
  Stmt <|-- EmptyStmt
  Stmt <|-- LabeledStmt
  Stmt <|-- ExprStmt
  Stmt <|-- SendStmt
  Stmt <|-- IncDecStmt
  Stmt <|-- AssignStmt
  Stmt <|-- GoStmt
  Stmt <|-- DeferStmt
  Stmt <|-- ReturnStmt
  Stmt <|-- BranchStmt
  Stmt <|-- BlockStmt
  Stmt <|-- IfStmt
  Stmt <|-- SwitchStmt
  Stmt <|-- TypeSwitchStmt
  Stmt <|-- SelectStmt
  Stmt <|-- ForStmt
  Stmt <|-- RangeStmt
}

' グループ: 式を表すノード
package "Expr: 式を表すノード" as PExpr {
  interface Expr
  NodePkg::Node <|-- Expr

  class BadExpr
  class ParenExpr
  class SelectorExpr
  class IndexExpr
  class IndexListExpr
  class SliceExpr
  class TypeAssertExpr
  class CallExpr
  class StarExpr
  class UnaryExpr
  class BinaryExpr
  class KeyValueExpr
  class BasicLit
  class FuncLit
  class Ident
  class Ellipsis
  Expr <|-- BadExpr
  Expr <|-- ParenExpr
  Expr <|-- SelectorExpr
  Expr <|-- IndexExpr
  Expr <|-- IndexListExpr
  Expr <|-- SliceExpr
  Expr <|-- TypeAssertExpr
  Expr <|-- CallExpr
  Expr <|-- StarExpr
  Expr <|-- UnaryExpr
  Expr <|-- BinaryExpr
  Expr <|-- KeyValueExpr
  Expr <|-- BasicLit
  Expr <|-- FuncLit
  Expr <|-- Ident
  Expr <|-- Ellipsis
}

' グループ: 型リテラルを表すノード（→ Node に1本）
package "型リテラルを表すノード" as PTypeLit {
  class ArrayType
  class StructType
  class FuncType
  class InterfaceType
  class MapType
  class ChanType
}
PTypeLit --> NodePkg

' グループ: リテラルを表すノード（→ Expr に1本, CompositeLit は Node）
package "リテラルを表すノード" as PLiteral {
  class BasicLit_Literal
  class FuncLit_Literal
  class CompositeLit
}
PLiteral --> PExpr
PLiteral --> NodePkg

' グループ: コメントパッケージ
package "コメントノード" as PComment {
  class Comment
  class CommentGroup
}
PComment --> NodePkg

' グループ: Fieldノード
package "フィールドノード" as PField {
  class Field
  class FieldList
}
PField --> NodePkg

' グループ: caseノード
package "caseノード" as PCase {
  class CaseClause
  class CommClause
}
PCase --> NodePkg

' グループ: Fileノード
package "Fileノード" as PFile {
  class File
}
PFile --> NodePkg

' グループ: Packageノード
package "Packageノード" as PPackage {
  class Package
}
PPackage --> NodePkg

@enduml
