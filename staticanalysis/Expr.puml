@startuml
skinparam direction top to bottom

package "Expr: 式を表すノード" as PExpr {
  interface Expr
  ' NodePkg::Node <|-- Expr // 依存関係ファイルで定義

  class BadExpr
  note right of BadExpr : 1 +
  class ParenExpr
  note right of ParenExpr : (x + y)
  class SelectorExpr {
    X : Expr
    Sel : *Ident
  }
  note right of SelectorExpr : v.M
  class IndexExpr
  note right of IndexExpr : arr[0]
  class IndexListExpr
  note right of IndexListExpr : T[int, string]
  class SliceExpr
  note right of SliceExpr : slice[1:3]
  class TypeAssertExpr
  note right of TypeAssertExpr : x.(int)
  class CallExpr {
    Fun : Expr
  }
  note right of CallExpr : f(1, 2, 3)
  class StarExpr
  note right of StarExpr : *ptr
  class UnaryExpr
  note right of UnaryExpr : -100
  class BinaryExpr
  note right of BinaryExpr : x + 1
  class KeyValueExpr
  note right of KeyValueExpr : key: "value"
  class BasicLit
  note right of BasicLit : "literal"
  class FuncLit
  class Ident
  note right of Ident : x
  class Ellipsis
  note right of Ellipsis : ...
  Expr <|-- BadExpr
  Expr <|-- ParenExpr
  Expr <|-- SelectorExpr
  Expr <|-- IndexExpr
  Expr <|-- IndexListExpr
  Expr <|-- SliceExpr
  Expr <|-- TypeAssertExpr
  Expr <|-- CallExpr
  Expr <|-- StarExpr
  Expr <|-- UnaryExpr
  Expr <|-- BinaryExpr
  Expr <|-- KeyValueExpr
  Expr <|-- BasicLit
  Expr <|-- FuncLit
  Expr <|-- Ident
  Expr <|-- Ellipsis
}

@enduml 
